MÉTODO 1: ESTÁTICO

file manager

subir zip con app django
descomprimir

crear webapp con setup python application
> create application
> elegir python version
> application root: django project folder ej: "CARPETAPROYECTO/nombreapp"
> app url (por si hay más de un dominio)
> app startup file: blank
> app entry point: blank
> passenger log file: root directory/applog/passenger.log (archivo log)

> archivo passenger da una respuesta
> editar passenger
import os
import sys
from creactivaweb.wsgi import application

> copiar envirorment path

> ir a advanced>terminal
> pegar envirorment path
> pip install django (versión correspondiente)
> instalar todas las dependencias correspondientes

> restart application

> app andando

* añadir dominio al settings.py
ALLOWED_HOSTS = ["creactivaanimaciones.cl"]
> como es un ambiente de producción, la app se debe reiniciar cada vez que se hagan
cambios en el código

crear folder static en public_html
en settings > STATIC_ROOT = '/home/XXXXX/public_html/static' o algo así
terminal > ./manage.py collectstatic
ya que el archivo esático está en el folder static, entonces se puede acceder mediante la url
correspondiente

---------

MÉTODO 2: CI/CD
> crear carpeta deploy
deploy
    /.github
        /workflows
            master.yml
    /home   
    /static
    /webapp(carpeta proyecto django)
    /venv
    db.sqlite3
    manage.py
    requirements.txt

En mi caso:
creactivaweb
    /.github
        /workflows
            master.yml
    /main
    /creactivaweb
    /static
    /venv
    db.sqlite3
    manage.py
    requirements.txt

github actions
> ftp deploy
> copiar usage example en master.yml
modificar:
    on:
        push:
            branches:
                - master
name: creactiva web
jobs:
    web-deploy:
        name: deploy
        runs-on: ubuntu-latest (revisar si debe coincidir)
        steps:
            name: get the latest code
            uses: actions/checkout@v2 ???
        
            name: sync files
            uses: ruta al ftp deploy
            with:
                server: www.rutaserver.cl
                username: ${{ secrets.ftp_username }}
                password: ${{ secrets.ftp_username }}
                server-dir: /deploy/ (carpeta creada anteriormente)


>actualizar en github
> escribir en pages>secrets
    name: ftp_username
    value: miusername

    name: ftp_password
    value: mipassword (de github??)

> actions>re-run jobs

> ALLOWED_HOSTS = ['*']

deploy debería estar listo
se deberían reflejar todos los cambios apenas se hagan


-- EXTRAS ---
SEGURIDAD
habilitar secure DEBUG y SECRET_KEY en settings.py

comprobar deployment status
python manage.py check --deploy

servir archivos estáticos
django provee django.contrib.staticfiles para manejarlos, pero esto solo funciona cuando
DEBUG es True, esto es peligroso ?? así que hay que dejarlo en False

# Static asset configuration
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = 'staticfiles'
STATICFILES_DIRS = (
os.path.join(BASE_DIR, 'static'),
)

placeholder.txt para que git haga seguimiento del directorio

usar Cling para configurar wsgi.py
primero instalar:
> pip install dj-static
> pip install static3

escribir en wsgi.py

import os
from django.core.wsgi import get_wsgi_application
from dj_static import Cling
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ََAPPNAME.settings')
application = Cling(get_wsgi_application())


ahora se puede correr: python manage.py collectstatic en la terminal de cpanel

BASE DE DATOS

en cpanel: Databases>POSTGRESQL databases
> create database by "nombre bbdd"
> create new user in "add new user"
> add user to database
> current users >> click on synchronize grants

ahora, en settings.py:

DATABASES = {
  'default': {
  'ENGINE': 'django.db.backends.postgresql_psycopg2',
  'NAME': 'database_name',
  'USER': 'database_user',
  'PASSWORD': 'user_password'
  'HOST': 'localhost',
  'PORT': '5432',
  }
}

instalar psycopg2
> pip install psycopg2

GITHUB
guardar los requirements
> pip freeze > requirements.txt

antes de pushear los cambios, asegurarse que ALLOWED_HOSTS está configurada
en settings.py

> pushear cambios

> cPanel > git version control

clone a repository(ya lo hice)

PASSENGER
avisar a cpanel cómo iniciar mi programa

crear archivo passenger_wsgi.py en la carpeta del proyecto

path en cPanel: repositories > YOUR REPOSITORY > passenger_wsgi.py

> abrir passenger_wsgi.py e importar lo siguiente

from YOUR_PROJECT_FOLDER.wsgi import application

> guardar


FINALIZANDO
ir a página principal cpanel: software > setup python app > create application

application startup file = path a passenger_wsgi.py en el repo, si está en root, entonces
solo escribir: passenger_wsgi.py

application entry point = nombre del objeto llamable dentro del archivo wsgi,
en este caso, solo es: application

**setear variables de entorno para esconder clave secreta y otras cosas, como claves
captcha ??**

configuration files > subir el requirements.txt
> pip install requirements.txt
*si no funciona, se pueden instalar los paquetes en la terminal de cpanel con el
path source que provee cpanel
advance >> terminal

si no funciona psycopg2, intentar con psycopg2-binary

MIGRACIONES
> python manage.py migrate
> python manage.py collectstatic
> reiniciar app
